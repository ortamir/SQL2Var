(Papers 2 BOUNDED 3 3) (Authors 2) (Conflicts 2) (ReviewerBids 2)  (Reviewers 2 BOUNDED 2)  (ReviewerAssignments  2)
requires
forall x y (ReviewerBids(x,y) -> ~ Conflicts(x,y)) &&
forall x y (ReviewerAssignments(x,y) -> ~ Conflicts(x,y))

/* get-papers(currentUser) := exists y z w (Papers(x,y,z,w) & ~ Conflicts(currentUser, x) */

if (. exists x (exists y z w (Papers(x,y,z,w) & ~ Conflicts(currentUser, x)) & x = bidId ))
  INSERT INTO ReviewerBids VALUES (currentUser, bidId);
else
  skip ;
;
ensures
forall x y (ReviewerBids(x,y) -> ~ Conflicts(x,y)) &&
forall x y (ReviewerAssignments(x,y) -> ~ Conflicts(x,y))


