(declare-sort V 0)
(declare-datatypes () ((B$2 _0@2 _1@2) (B$3 _0@3 _1@3 _2@3)))
(declare-fun Reviews (V V) Bool)
(declare-fun Papers (V B$3) Bool)
(declare-fun Conflicts (V V) Bool)
(declare-fun Reviewers (V V B$2) Bool)
(declare-fun Reviews_ (V V) Bool)
(declare-fun Papers_0 (V) Bool)
(declare-fun Papers_1 (V) Bool)
(declare-fun Papers_2 (V) Bool)
(declare-fun Conflicts_ (V V) Bool)
(declare-fun Reviewers_0 (V V) Bool)
(declare-fun Reviewers_1 (V V) Bool)
(declare-const papid V)
(declare-const usid V)
(assert (not (=> (and (forall ((x V)) (forall ((y V)) (and (=> (Reviewers x y _0@2) (not (Conflicts x y))) (=> (Reviewers x y _1@2) (not (Conflicts x y)))))) (forall ((x V)) (forall ((y V)) (=> (Reviews x y) (not (Conflicts x y)))))) (or (and (not (exists ((x V)) (exists ((y V)) (and (and (= x usid) (= y papid)) (Conflicts x y))))) (and (forall ((x V)) (forall ((y V)) (and (=> (or (Reviewers x y _0@2) (and (= _0@2 _0@2) (and (= x usid) (= y papid)))) (not (Conflicts x y))) (=> (or (Reviewers x y _1@2) (and (= _1@2 _0@2) (and (= x usid) (= y papid)))) (not (Conflicts x y)))))) (forall ((x V)) (forall ((y V)) (=> (Reviews x y) (not (Conflicts x y))))))) (and (not (not (exists ((x V)) (exists ((y V)) (and (and (= x usid) (= y papid)) (Conflicts x y)))))) (and (forall ((x V)) (forall ((y V)) (and (=> (Reviewers x y _0@2) (not (Conflicts x y))) (=> (Reviewers x y _1@2) (not (Conflicts x y)))))) (forall ((x V)) (forall ((y V)) (=> (Reviews x y) (not (Conflicts x y)))))))))) )
(check-sat)
(get-model)

